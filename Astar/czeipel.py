# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _czeipel
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _czeipel.delete_Model
    __del__ = lambda self : None;
    def fx(*args): return _czeipel.Model_fx(*args)
    def dimen(*args): return _czeipel.Model_dimen(*args)
Model_swigregister = _czeipel.Model_swigregister
Model_swigregister(Model)

class Integrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Integrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Integrator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _czeipel.delete_Integrator
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _czeipel.new_Integrator(*args)
        try: self.this.append(this)
        except: self.this = this
Integrator_swigregister = _czeipel.Integrator_swigregister
Integrator_swigregister(Integrator)

class QuadTwoD(Integrator):
    __swig_setmethods__ = {}
    for _s in [Integrator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadTwoD, name, value)
    __swig_getmethods__ = {}
    for _s in [Integrator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadTwoD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _czeipel.new_QuadTwoD(*args)
        try: self.this.append(this)
        except: self.this = this
    def Integrate(*args): return _czeipel.QuadTwoD_Integrate(*args)
    __swig_destroy__ = _czeipel.delete_QuadTwoD
    __del__ = lambda self : None;
QuadTwoD_swigregister = _czeipel.QuadTwoD_swigregister
QuadTwoD_swigregister(QuadTwoD)

class Zeipel(Model):
    __swig_setmethods__ = {}
    for _s in [Model]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Zeipel, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Zeipel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _czeipel.new_Zeipel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _czeipel.delete_Zeipel
    __del__ = lambda self : None;
    def Cal_F(*args): return _czeipel.Zeipel_Cal_F(*args)
    def Cal_F0(*args): return _czeipel.Zeipel_Cal_F0(*args)
    def fx(*args): return _czeipel.Zeipel_fx(*args)
    def dimen(*args): return _czeipel.Zeipel_dimen(*args)
Zeipel_swigregister = _czeipel.Zeipel_swigregister
Zeipel_swigregister(Zeipel)



